policy_module(custom-server, 1.0.3)


########################################
#
# Declarations
#

## <desc>
## <p>
## Allow nginx to read portage files
## </p>
## </desc>
gen_tunable(nginx_can_read_ebuild, false)

####### Policy

# nagios optional policy
optional_policy(`
        nagios_plugin_template_nonsystem(admin)
        nagios_plugin_template_nonsystem(checkdisk)
        nagios_plugin_template_nonsystem(mail)
        nagios_plugin_template_nonsystem(services)
        nagios_plugin_template_nonsystem(system)
        nagios_plugin_template_nonsystem(eventhandler)
')

optional_policy(`
	gen_require(`
		type mutt_t;
	')

	mta_send_mail(mutt_t)
	mta_signal_system_mail(mutt_t)
	mta_kill_system_mail(mutt_t)
')

# NGINX optional policy
optional_policy(`
	gen_require(`
		type nginx_t;
	')

	allow nginx_t self:capability { dac_override dac_read_search };
	miscfiles_read_generic_certs(nginx_t)

	tunable_policy(`nginx_can_read_ebuild',`
		portage_read_ebuild(nginx_t)
	')
')

# Allow users to manage Postges DB and config files optional policy
optional_policy(`
	gen_require(`
		type user_t, postgresql_db_t, postgresql_etc_t;
	')

	gen_tunable(allow_user_manage_postgresql_files, false)

	tunable_policy(`allow_user_manage_postgresql_files',`
		admin_pattern(user_t, postgresql_db_t)
		admin_pattern(user_t, postgresql_etc_t)
	')
')

gen_require(`
        type portage_exec_t, portage_ebuild_t, portage_t;
        type cert_t;
')

allow portage_t portage_ebuild_t:file map;
# type=AVC msg=audit(1563493740.990:255278): avc:  denied  { map } for  pid=25705 comm="trust" path="/etc/ssl/certs/ca-certificates.crt" dev="xvda" ino=65306702 scontext=system_u:system_r:portage_t:s0-s0:c0.c1023 tcontext=system_u:object_r:cert_t:s0 tclass=file permissive=0
allow portage_t cert_t:file map;
kernel_mounton_proc(portage_t)
kernel_mount_proc(portage_t)


optional_policy(`
	gen_require(`
		type salt_minion_t;
	')

	# dnspython support
	corenet_udp_bind_generic_node(salt_minion_t)
')
